precision mediump float;

varying vec2 v_texcoord;
varying float v_height;

varying vec3 v_normal;
varying float v_depth;
varying float v_fogDistance;
varying vec3 v_worldSpace;
varying vec3 v_worldNormal;
varying vec3 v_cameraPos;
varying vec3 v_fragPos;

uniform sampler2D u_texture;
uniform sampler2D u_splatmap;

vec4 TriplarMapping(vec3 worldPosition, vec3 worldNormal, sampler2D texture, vec2 tile){
   vec2 pixelResolution = vec2(6144, 2048);
   vec2 pixelOffset = 1.0 / pixelResolution;
   vec2 padding = pixelOffset * 0.5;
   vec2 tileSize = vec2(1.0 / 6.0, 1.0 / 2.0);
   float tiling = 0.001;

   vec3 blending = abs(worldNormal);

   blending = pow(blending, vec3(2.0));

   blending /= (blending.x + blending.y + blending.z);

   vec2 uvX = worldPosition.zy * tiling;
   vec2 uvY = worldPosition.xz * tiling;
   vec2 uvZ = -worldPosition.xy * tiling;

   vec4 colorX = texture2D(texture, fract(uvX) * (tileSize - 2.0 * padding) + tile * tileSize + padding);
   vec4 colorY = texture2D(texture, fract(uvY) * (tileSize - 2.0 * padding) + tile * tileSize + padding);
   vec4 colorZ = texture2D(texture, fract(uvZ) * (tileSize - 2.0 * padding) + tile * tileSize + padding);

   vec4 finalColor = colorX * blending.x + colorY * blending.y + colorZ * blending.z;
   return finalColor;
}

void main() {

   vec3 lightColor = vec3(0.8, 0.8, 0.8);
   // ambient
   float ambientStrength = 0.5;
   vec3 ambient = ambientStrength * lightColor;

   // diffuse 
   vec3 norm = normalize(v_worldNormal);
   vec3 lightDir = normalize(vec3(1.0, 2.0, 1.0));
   float diff = max(dot(norm, lightDir), 0.0);
   vec3 diffuse = diff * lightColor;
   
   // specular
   float specularStrength = 0.2;
   vec3 viewDir = normalize(v_cameraPos - v_fragPos);
   vec3 reflectDir = reflect(-lightDir, norm);  
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2.0);
   vec3 specular = specularStrength * spec * lightColor;

   vec4 leaf_color = TriplarMapping(v_worldSpace, norm, u_texture, vec2(2.0, 0.0));
   vec4 sand_color = TriplarMapping(v_worldSpace, norm, u_texture, vec2(1.0, 1.0));
   vec4 snow_color = TriplarMapping(v_worldSpace, norm, u_texture, vec2(3.0, 1.0));
   vec4 ground_color = TriplarMapping(v_worldSpace, norm, u_texture, vec2(5.0, 1.0));

   vec4 splat = texture2D(u_splatmap, v_texcoord);

   vec4 splatColor =
      leaf_color * splat.r +
      sand_color  * splat.g +
      snow_color  * splat.b +
      ground_color * splat.a;

   float fogFactor = 1.0 - exp(-v_fogDistance * 0.0008);
   //float heightFactor = 1.0 - smoothstep(0.0, 100.0, v_height);
   //fogFactor *= heightFactor;

   vec3 fogColor = vec3(0.4, 0.6, 0.9);
   vec3 color = mix(splatColor.rgb, fogColor, fogFactor);

   vec3 result = (ambient + diffuse) * splatColor.rgb;
   gl_FragColor = vec4(result, 1.0);
   //gl_FragColor = vec4(color, 1.0);
   //gl_FragColor = vec4(normalize(v_worldNormal), 1.0);

}